version: 2.1
jobs:
  build-code:
    docker:
      - image: golang:1.16.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "go.mod" }}
            - v1-dependencies-
      - run:
          name: Install dependencies for the next build steps
          command: |
            make setup
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - .
          key: v1-dependencies-{{ checksum "go.mod" }}
      - run:
          name: Lint the Dockerfile and vet the Go code
          command: |
            make lint
      - run:
          name: Compile the Go code to ensure it builds correctly
          command: |
            go build -o capstone-server .
      - run:
          name: Run the Go unit tests
          command: |
            make test

  build-image:
    docker:
      - image: python:3.7.3-stretch # I simply couldn't get the Docker steps to work with any other image...
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: false
      - run:
          name: Install Docker and it's dependencies
          command: |
            apt-get update && apt-get -y install sudo
            sudo apt-get update
            sudo apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable" -y
            sudo apt-get update
            sudo apt-get -y install docker-ce docker-ce-cli containerd.io
      - run:
          name: Build the Docker image
          command: |
            docker build -t capstone:v1 .
            docker images
      - run:
          name: Tag and push the image to Docker Hub
          command: |
            dockerpath="$DH_USERNAME/capstone:v1"
            docker login -u "$DH_USERNAME" -p "$DH_PASSWORD"
            docker tag capstone:v1 $dockerpath
            docker push $dockerpath

  deploy-eks:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install sudo
            sudo yum update

            sudo yum -y install curl tar unzip

            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # sudo ./aws/install

            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            . ~/.bashrc

            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

            echo "AWSCLI VERSION:"
            aws --version

            echo "KUBECTL VERSION:"
            kubectl version --short --client

            echo "EKSCTL VERSION:"
            eksctl version
      
      - run:
          name: Create an EKS cluster via eksctl
          command: |
            . ~/.bashrc

            export AWS_ACCESS_KEY_ID=$AWS_CLI_AK
            export AWS_SECRET_ACCESS_KEY=$AWS_CLI_SK
            export AWS_DEFAULT_REGION=$AWS_CLI_DR

            CLUSTER_EXISTS=$(aws cloudformation list-exports --query "Exports[?Name=='eksctl-gocapstone-cluster::ARN'].Value" \
              --no-paginate --output text | wc -l | awk '{print $1}')

            if [[ $CLUSTER_EXISTS -gt 0 ]]; then
              echo "AWS EKS CLUSTER ALREADY EXISTS... SKIPPING CLUSTER CREATION STEP"
              exit 0
            fi

            eksctl create cluster \
              --name gocapstone \
              --version 1.18 \
              --region us-west-2 \
              --nodegroup-name gocapstone-ng \
              --node-type t3.small \
              --nodes-min 2 \
              --nodes-max 4 \
              --managed

      - run:
          name: Configure kubectl for AWS EKS
          command: |
            . ~/.bashrc

            aws eks --region region update-kubeconfig --name gocapstone
            kubectl get svc

workflows:
  default:
    jobs:
      # - build-code
      # - build-image:
      #     requires: [build-code]
      - deploy-eks:
          # requires: [build-image]
          filters:
            branches:
              only:
                - main